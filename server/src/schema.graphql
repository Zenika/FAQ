# DIRECTIVES AND SCALARS

scalar Json
scalar DateTime
directive @admin on QUERY | FIELD_DEFINITION

# QUERIES AND MUTATIONS

type Query {
  me: User

  node(where: NodeWhereUniqueInput): Node

  history(
    where: HistoryActionWhereInput
    orderBy: HistoryActionOrderByInput
    first: Int!
    skip: Int!
  ): History

  search(
    text: String
    tags: [String!]
    flags: [String!]
    orderBy: NodeOrderByInput
    first: Int!
    skip: Int!
  ): SearchResult!

  randomNode(tag: String): Node

  configuration: Configuration @admin
}

type Mutation {
  updateMe(name: String!, email: String!, picture: String!): User
  forgetMe: User
  authenticate(idToken: String!): User

  createQuestionAndTags(title: String!, tags: [String!]!): Question
  updateQuestionAndTags(id: ID!, title: String!, previousTitle: String!, tags: [String!]!): Question
  incrementQuestionViewsCounter(id: ID!): Question

  createAnswerAndSources(content: String, sources: String!, nodeId: ID!): Answer
  updateAnswerAndSources(
    id: ID!
    content: String
    previousContent: String!
    sources: String!
  ): Answer

  addFlag(type: String!, nodeId: ID!): Node
  removeFlag(type: String!, nodeId: ID!): Node

  updateConfiguration(
    title: String!
    tags: Json!
    algoliaSynonyms: Json!
    workplaceSharing: Boolean!
    authorizedDomains: [String!]!
    bugReporting: BugReporting!
    slackChannelHook: String
  ): Configuration @admin
  regenerateSlackCommandKey: Configuration! @admin
}

# BASE TYPES

type Node {
  id: ID!

  question: Question
  answer: Answer

  flags: [Flag!]!
  tags: [Tag!]!

  history: [HistoryAction!]!

  highlights: Json
}

type Question {
  id: ID!
  title: String!
  slug: String!
  node: Node!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Answer {
  id: ID!
  content: String!
  sources: [Source!]
  node: Node!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Source {
  id: ID!
  label: String!
  url: String!
  answer: Answer!
}

type Flag {
  id: ID!
  type: String!
  node: Node!
  user: User!
  createdAt: DateTime!
}

type Tag {
  id: ID!
  label: String!
  node: Node!
  user: User!
  createdAt: DateTime!
}

type HistoryAction {
  id: ID!
  action: String!
  model: String!
  meta: Json
  node: Node!
  user: User!
  createdAt: DateTime!
}

type User {
  id: ID!
  auth0Id: String
  admin: Boolean

  name: String
  email: String

  picture: String
}

type Configuration {
  title: String!

  auth0Domain: String!
  auth0ClientId: String!
  authorizedDomains: [String!]

  algoliaAppId: String @admin
  algoliaApiKey: String @admin
  algoliaSynonyms: Json

  slackChannelHook: String @admin
  slackCommandKey: String @admin

  tags: Json

  workplaceSharing: Boolean
  bugReporting: BugReporting
}

enum BugReporting {
  MAIL
  GITHUB
}

# INPUT/OUTPUT TYPES

type SearchResult {
  nodes: [Node!]!
  meta: PaginationMeta!
}

type History {
  historyActions: [HistoryAction!]!
  meta: PaginationMeta!
}

type PaginationMeta {
  entriesCount: Int!
  pageCurrent: Int!
  pagesCount: Int!
}

input NodeWhereUniqueInput {
  id: ID!
}

input NodeOrderByInput {
  createdAt: OrderByArg
}

input UserWhereUniqueInput {
  id: ID!
}

input HistoryActionWhereInput {
  user: UserWhereUniqueInput
  node: NodeWhereUniqueInput
}

input HistoryActionOrderByInput {
  createdAt: OrderByArg
}

enum OrderByArg {
  asc
  desc
}
