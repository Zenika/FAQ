### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type AlgoliaSynonym {
  objectID: String!
  synonyms: [String!]!
  type: String!
}

type Answer {
  content: String!
  createdAt: DateTime!
  id: String!
  node: Node!
  sources: [Source!]!
  updatedAt: DateTime!
  user: User!
}

enum BugReporting {
  GITHUB
  MAIL
}

type Configuration {
  algoliaSynonyms: [AlgoliaSynonym!]!
  authorizedDomains: [String!]!
  bugReporting: BugReporting!
  id: String!
  slackChannelHook: String
  slackCommandKey: String
  tagCategories(after: String, before: String, first: Int, last: Int, skip: Int): [TagCategory!]!
  title: String!
  workplaceSharing: Boolean!
}

scalar DateTime

type Flag {
  createdAt: DateTime!
  id: String!
  node: Node!
  type: String!
  user: User!
}

type Highlight {
  answer: String
  question: String
}

type HistoryAction {
  action: String!
  createdAt: DateTime!
  id: String!
  meta: String
  model: String!
  node: Node!
  user: User!
}

type HistoryResult {
  historyActions: [HistoryAction!]!
  meta: PaginationMeta!
}

type Mutation {
  addFlag(flag: String!, nodeId: String!): Node!
  authenticate(idToken: String!): User!
  createAnswerAndSources(content: String!, nodeId: String!, sources: String!): Answer!
  createQuestion(tags: [String!]!, title: String!): Node!
  deleteMe: User!
  incrementQuestionViewsCounter(questionId: String!): Question
  regenerateSlackCommandKey: Configuration!
  removeFlag(flag: String!, nodeId: String!): Node!
  updateAnswerAndSources(
    content: String!
    id: String!
    previousContent: String!
    previousSources: String!
    sources: String!
  ): Answer!
  updateConfiguration(
    algoliaSynonyms: String
    authorizedDomains: [String!]
    bugReporting: BugReporting
    slackChannelHook: String
    slackCommandKey: String
    tagCategories: String
    title: String
    workplaceSharing: Boolean
  ): Configuration!
  updateMe(name: String, picture: String): User!
  updateQuestion(id: String!, previousTitle: String!, tags: [String!]!, title: String!): Node!
}

type Node {
  answer: Answer
  flags(after: String, before: String, first: Int, last: Int, skip: Int): [Flag!]!
  highlights: Highlight
  id: String!
  question: Question!
  tags(after: String, before: String, first: Int, last: Int, skip: Int): [Tag!]!
}

type PaginationMeta {
  entriesCount: Int!
  pageCurrent: Int!
  pagesCount: Int!
}

type Query {
  configuration: Configuration!
  history(first: Int!, nodeId: String, skip: Int!, userId: String): HistoryResult!
  me: User
  node(id: String!): Node!
  randomQuestion: Node
  search(first: Int!, flags: [String!], skip: Int!, tags: [String!], text: String): SearchResult!
}

type Question {
  createdAt: DateTime!
  id: String!
  node: Node!
  slug: String!
  title: String!
  updatedAt: DateTime!
  user: User!
  views: Int!
}

type SearchResult {
  meta: PaginationMeta!
  nodes: [Node!]!
}

type Source {
  label: String!
  url: String!
}

type Tag {
  createdAt: DateTime!
  id: String!
  label: TagLabel!
  node: Node!
  user: User!
}

type TagCategory {
  configuration: Configuration!
  id: String!
  labels(after: String, before: String, first: Int, last: Int, skip: Int): [TagLabel!]!
  name: String!
  order: Int!
}

type TagLabel {
  category: TagCategory!
  id: String!
  name: String!
  order: Int!
  tags(after: String, before: String, first: Int, last: Int, skip: Int): [Tag!]!
}

type User {
  admin: Boolean!
  email: String!
  id: String!
  locale: String
  name: String
  picture: String
}
