# import ZNode, Question, Answer, Source, Flag, Tag, HistoryAction, Configuration from './generated/prisma.graphql'

# import ZNodeOrderByInput, ZNodeConnection, ZNodeWhereUniqueInput from './generated/prisma.graphql'
# import HistoryActionWhereInput from './generated/prisma.graphql'

directive @admin on QUERY

type Query {
  me: User

  zNode(where: ZNodeWhereUniqueInput): ZNode

  history(
    where: HistoryActionWhereInput
    orderBy: HistoryActionOrderByInput
    first: Int!
    skip: Int!
  ): History

  search(
    text: String
    tags: [String!]
    flags: [String!]
    orderBy: ZNodeOrderByInput
    first: Int!
    skip: Int!
  ): SearchResult!

  randomNode(tag: String): ZNode

  configuration: Configuration @admin
}

type Mutation {
  updateMe(name: String!, email: String!, picture: String!): User
  authenticate(idToken: String!): User

  createQuestionAndTags(title: String!, tags: [String!]!): Question
  updateQuestionAndTags(id: ID!, title: String!, previousTitle: String!, tags: [String!]!): Question

  createAnswerAndSources(content: String, sources: String!, nodeId: ID!): Answer
  updateAnswerAndSources(id: ID!, content: String, previousContent: String!, sources: String!): Answer

  addFlag(type: String!, nodeId: ID!): ZNode
  removeFlag(type: String!, nodeId: ID!): ZNode

  updateConfiguration(title: String, tags: Json!, algoliaSynonyms: Json!): Configuration @admin
}

type SearchResult {
  nodes: [ZNode!]!
  meta: PaginationMeta!
}

type History {
  historyActions: [HistoryAction!]!
  meta: PaginationMeta!
}

type PaginationMeta {
  entriesCount: Int!
  pageCurrent: Int!
  pagesCount: Int!
}

type User {
  id: ID!
  auth0Id: String
  admin: Boolean

  name: String
  email: String

  picture: String
}
