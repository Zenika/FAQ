type ZNode {
  id: ID! @unique

  group: Group @relation(name: "GroupNodes")

  question: Question @relation(name: "NodeQuestion", onDelete: CASCADE)
  answer: Answer @relation(name: "NodeAnswer", onDelete: CASCADE)

  flags: [Flag!]! @relation(name: "NodeFlags", onDelete: CASCADE)
  tags: [Tag!]! @relation(name: "NodeTags", onDelete: CASCADE)

  history: [HistoryAction!]! @relation(name: "NodeHistoryActions", onDelete: CASCADE)

  highlights: Json
}

type Question {
  id: ID! @unique

  title: String!
  slug: String!

  node: ZNode! @relation(name: "NodeQuestion")
  user: User! @relation(name: "UserQuestions")

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Answer {
  id: ID! @unique

  content: String!

  sources: [Source!]! @relation(name: "AnswerSources", onDelete: CASCADE)

  node: ZNode! @relation(name: "NodeAnswer")
  user: User! @relation(name: "UserAnswers")

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Source {
  id: ID! @unique

  label: String!
  url: String!

  answer: Answer! @relation(name: "AnswerSources")
}

type Flag {
  id: ID! @unique

  type: String!

  node: ZNode! @relation(name: "NodeFlags")
  user: User! @relation(name: "UserFlags")

  createdAt: DateTime!
}

type Tag {
  id: ID! @unique

  label: String!

  node: ZNode! @relation(name: "NodeTags")
  user: User! @relation(name: "UserTags")

  createdAt: DateTime!
}

type HistoryAction {
  id: ID! @unique

  action: String!
  model: String!
  meta: Json

  node: ZNode! @relation(name: "NodeHistoryActions")
  user: User! @relation(name: "UserHistoryActions")

  createdAt: DateTime!
}

type User {
  id: ID! @unique
  auth0Id: String @unique
  key: String

  admin: Boolean! @default(value: "false")

  currentGroup: Group @relation(name: "GroupUsers")

  name: String
  email: String

  picture: String
  locale: String

  questions: [Question!]! @relation(name: "UserQuestions")
  answers: [Answer!]! @relation(name: "UserAnswers")

  flags: [Flag!]! @relation(name: "UserFlags")
  tags: [Tag!]! @relation(name: "UserTags")

  history: [HistoryAction!]! @relation(name: "UserHistoryActions")

  createdAt: DateTime!
}

type Group {
  id: ID! @unique

  name: String!
  slug: String! @unique

  configuration: Configuration! @relation(name: "ConfigurationGroups")

  nodes: [ZNode!]! @relation(name: "GroupNodes", onDelete: CASCADE)
  users: [User!]! @relation(name: "GroupUsers")

  tags: Json
  workplaceSharing: Boolean @default(value: false)

  algoliaSynonyms: Json
  slackChannelHook: String
}

type Configuration {
  id: ID! @unique

  name: String! @unique

  title: String! @default(value: "Demo")

  groups: [Group!]! @relation(name: "ConfigurationGroups", onDelete: CASCADE)

  algoliaAppId: String
  algoliaApiKey: String

  auth0Domain: String!
  auth0ClientId: String!

  mailgunDomain: String
  mailgunApiKey: String
}
