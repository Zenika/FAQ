(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"./docs/src/advanced/configuration.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),o=a.n(t),m=a("./node_modules/@mdx-js/tag/dist/index.js");function r(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},m=Object.keys(e);for(t=0;t<m.length;t++)a=m[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(t=0;t<m.length;t++)a=m[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}n.default=function(e){var n=e.components;r(e,["components"]);return o.a.createElement(m.MDXTag,{name:"wrapper",components:n},o.a.createElement(m.MDXTag,{name:"h1",components:n,props:{id:"configuration"}},"Configuration"),o.a.createElement(m.MDXTag,{name:"p",components:n},"FAQ is a multi-tenancy application with multi services. (Read ",o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"/advanced/multi-tenancy"}},"this documentation page")," for more information about multi-tenancy in FAQ)"),o.a.createElement(m.MDXTag,{name:"p",components:n},"Each of these service has a configuration in the database."),o.a.createElement(m.MDXTag,{name:"p",components:n},"The configuration is in the form of the following ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Configuration")," graphql type:"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-graphql",metastring:""}},"type Configuration {\n  id: ID! @unique\n\n  name: String! @unique\n\n  algoliaAppId: String\n  algoliaApiKey: String\n  algoliaSynonyms: Json\n\n  auth0Domain: String!\n  auth0ClientId: String!\n\n  mailgunDomain: String\n  mailgunApiKey: String\n\n  slackChannelHook: String\n\n  tags: Json\n}\n")),o.a.createElement(m.MDXTag,{name:"blockquote",components:n},o.a.createElement(m.MDXTag,{name:"p",components:n,parentName:"blockquote"},"Note: ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"name"),", ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"auth0Domain")," and ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"auth0ClientId")," are required fields")),o.a.createElement(m.MDXTag,{name:"p",components:n},"You can have multiple ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Configuration")," object, but only the one with the name ",o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},'"default"')," will be read by the backend and frontend."),o.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"creating-a-configuration"}},"Creating a configuration"),o.a.createElement(m.MDXTag,{name:"p",components:n},"Execute this mutation in your ",o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},"Prisma service Playground"),":"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-graphql",metastring:""}},'mutation {\n  createConfiguration(\n    data: {\n      name: "default"\n      auth0Domain: ""\n      ...\n    }\n  ) {\n    id\n    name\n  }\n}\n')),o.a.createElement(m.MDXTag,{name:"p",components:n},o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},"Important note:")," The configuration is cached by the backend. You will need to restart it after you create/update a configuration!"),o.a.createElement(m.MDXTag,{name:"blockquote",components:n},o.a.createElement(m.MDXTag,{name:"p",components:n,parentName:"blockquote"},"See below for a ",o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"#configuration-variables"}},"list of configuration variables"))),o.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"updating-a-configuration"}},"Updating a configuration"),o.a.createElement(m.MDXTag,{name:"p",components:n},"Execute this mutation in your ",o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},"Prisma service Playground"),":"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-graphql",metastring:""}},'mutation {\n  updateConfiguration(\n    where: {\n      name: "default"\n    }\n    data: {\n      auth0Domain: ""\n      auth0ApiKey: ""\n      ...\n    }\n  ) {\n    id\n    name\n  }\n}\n')),o.a.createElement(m.MDXTag,{name:"p",components:n},o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},"Important note:")," The configuration is cached by the backend. You will need to restart it after you create/update a configuration!"),o.a.createElement(m.MDXTag,{name:"blockquote",components:n},o.a.createElement(m.MDXTag,{name:"p",components:n,parentName:"blockquote"},"See below for a ",o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"#configuration-variables"}},"list of configuration variables"))),o.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"configuration-variables"}},"Configuration variables"),o.a.createElement(m.MDXTag,{name:"p",components:n},o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},"name")),o.a.createElement(m.MDXTag,{name:"p",components:n},"You can use any name you want, but only the configuration with the name ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"default")," will be used by the application."),o.a.createElement(m.MDXTag,{name:"p",components:n},o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},"algoliaAppId, algoliaApiKey and algoliaSynonyms")),o.a.createElement(m.MDXTag,{name:"p",components:n},"Configuration for Algolia. See ",o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"/advanced/backing-services"}},"Backing services")," for more information."),o.a.createElement(m.MDXTag,{name:"p",components:n},o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},"auth0Domain and auth0ClientId")),o.a.createElement(m.MDXTag,{name:"p",components:n},"Configuration for Auth0. See ",o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"/advanced/backing-services"}},"Backing services")," for more information."),o.a.createElement(m.MDXTag,{name:"p",components:n},o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},"mailgunDomain and mailgunApiKey")),o.a.createElement(m.MDXTag,{name:"p",components:n},"Configuration for Mailgun. See ",o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"/advanced/backing-services"}},"Backing services")," for more information."),o.a.createElement(m.MDXTag,{name:"p",components:n},o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},"slackChannelHook")),o.a.createElement(m.MDXTag,{name:"p",components:n},"Configuration for the Slack integration. See ",o.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"/advanced/integrations"}},"Integrations")," for more information."),o.a.createElement(m.MDXTag,{name:"p",components:n},o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},"tags")),o.a.createElement(m.MDXTag,{name:"p",components:n},"This is a JSON Object representing your tags. It must follow this schema:"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metastring:""}},'{\n  "categorie1": ["tag1", "tag2", "tag3"],\n  "categorie2": ["tag4", "tag5"]\n}\n')),o.a.createElement(m.MDXTag,{name:"p",components:n},"Example:"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metastring:""}},'{\n  "services": [\n    "paie",\n    "ops",\n    "recrutement",\n    "marketing",\n    "rh",\n    "dsi",\n    "dt",\n    "compta",\n    "formation",\n    "ce"\n  ],\n  "agency": ["nantes", "paris", "rennes", "lyon", "lille", "bordeaux", "singapour", "montr\xe9al"],\n  "theme": [\n    "nouvel arrivant",\n    "formateur",\n    "fin du mois",\n    "mission",\n    "tutoriel",\n    "mat\xe9riel",\n    "meta"\n  ]\n}\n')),o.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"settings-page"}},"Settings page"),o.a.createElement(m.MDXTag,{name:"p",components:n},"If a user has the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"admin")," attribute set to ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"true"),", he will have access to a ",o.a.createElement(m.MDXTag,{name:"strong",components:n,parentName:"p"},"Settings page")," where he will be able to manually change the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"tags")," and ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"algoliaSynonyms")," values."))}}}]);